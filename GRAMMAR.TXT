<expression> ::= <with_expression>
               | <conditional_expression>

<with_expression> ::= 'WITH' '(' <assignment_list> ')' <expression>

<assignment_list> ::= <assignment> ( ',' <assignment> )*

<assignment> ::= <identifier> '=' <expression>

<conditional_expression> ::= <logical_or_expression>
                           | <ternary_expression>
                           | <case_expression>

<ternary_expression> ::= <logical_or_expression> '?' <expression> ':' <expression>

<case_expression> ::= ( <case_clause> )+ 'DEFAULT' <expression>

<case_clause> ::= 'CASE' <logical_or_expression> 'CHOOSE' <expression>

<logical_or_expression> ::= <logical_and_expression> ( '|' <logical_and_expression> )*

<logical_and_expression> ::= <equality_expression> ( '&' <equality_expression> )*

<equality_expression> ::= <relational_expression> ( ( '=' | '≠' ) <relational_expression> )*

<relational_expression> ::= <additive_expression> ( ( '<' | '≤' | '>' | '≥' ) <additive_expression> )*

<additive_expression> ::= <multiplicative_expression> ( ( '+' | '-' ) <multiplicative_expression> )*

<multiplicative_expression> ::= <unary_expression> ( ( '*' | '/' | '%' ) <unary_expression> )*

<unary_expression> ::= ( '!' | '-' | '+' ) <unary_expression>
                     | <primary_expression>

<primary_expression> ::= <literal>
                       | <identifier>
                       | <function_call>
                       | '(' <expression> ')'

<function_call> ::= <identifier> '(' <argument_list_opt> ')'

<argument_list_opt> ::= <argument_list> | /* empty */

<argument_list> ::= <expression> ( ',' <expression> )*

<literal> ::= <number_literal>
            | <string_literal>
            | 'TRUE'
            | 'FALSE'
            | 'NULL'

<number_literal> ::= /* number literal (integer, float, exponential) */

<string_literal> ::= /* single-quoted or double-quoted string literal */

<identifier> ::= /* identifier matching the language rules */
